import { batch, Fn, FnBatcherArg } from "./batch-fn";

export class Batcher<T> {
    public currentValue!: T;

<%- getPipeableTypings() -%>
    public apply(...ops: any[]) {
        /* TODO: Remove as any while keeping pipe typings working */
        return (batch as any)(this, ...ops);
    }

    /* TODO: Fix tests and add $ */
    // public $ = this.batch;

    constructor(
        public initialValue: T,
        public mutateInitial: boolean,
        /* TODO:  Improve typing */
        public cloneFn: (a: T, batcher: Batcher<T>, ...args: any[]) => T
    ) { 
        this.currentValue = initialValue;
        this.isUnlocked = mutateInitial;
    }

    hasChanged = false;
    isUnlocked = false;

    /* TODO: Join with similar function, but preserve performance */
    /* TODO: Allow for generic typings for arguments passed */
    willChange(...args: any[]) {
        if (this.isUnlocked) {
            this.hasChanged = true;
            return false;            
        } else {
            this.currentValue = this.cloneFn(this.currentValue || this.initialValue, this, ...args);
            this.isUnlocked = true;
            this.hasChanged = true;
            return true;
        }
    }

    willChangeWithoutCloning() {
        if (this.isUnlocked) {        
            this.hasChanged = true;
            return false;            
        } else {
            this.currentValue = this.currentValue || this.initialValue;
            this.isUnlocked = true;            
            this.hasChanged = true;
            return false;
        }
    }

    lock() {
        this.isUnlocked = false;
        /* We should not change .hasChanged here, since a batcher can be locked and contain changes */
    }
 
}